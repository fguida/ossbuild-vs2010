/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Splash.java
 *
 * Created on Feb 16, 2010, 2:08:58 AM
 */

package simple;

import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.net.URI;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import ossbuild.NativeResource;
import ossbuild.Path;
import ossbuild.StringUtil;
import ossbuild.Sys;
import ossbuild.extract.IResourcePackage;
import ossbuild.extract.IResourceProcessor;
import ossbuild.extract.ResourceCallback;
import ossbuild.extract.ResourceProgressListenerAdapter;
import ossbuild.extract.Resources;
import ossbuild.init.SystemLoaderInitializeListenerAdapter;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerFactory;

/**
 *
 * @author David
 */
public class Splash extends javax.swing.JDialog {

	//<editor-fold defaultstate="collapsed" desc="Boilerplate">
    /** Creates new form Splash */
    public Splash(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        border = new javax.swing.JPanel();
        lbl = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        title = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Loading...");
        setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        setMinimumSize(new java.awt.Dimension(306, 100));
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        border.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("controlShadow")));
        border.setLayout(new java.awt.GridBagLayout());

        lbl.setFont(new java.awt.Font("DejaVu Sans", 0, 12));
        lbl.setText("Loading...");
        lbl.setMaximumSize(new java.awt.Dimension(61, 18));
        lbl.setMinimumSize(new java.awt.Dimension(61, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        border.add(lbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        border.add(progress, gridBagConstraints);

        title.setFont(new java.awt.Font("DejaVu Sans", 0, 21)); // NOI18N
        title.setText("OSSBuild VLC Example");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 12, 0);
        border.add(title, gridBagConstraints);

        getContentPane().add(border, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
		init();
	}//GEN-LAST:event_formWindowOpened

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Splash dialog = new Splash(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel border;
    private javax.swing.JLabel lbl;
    private javax.swing.JProgressBar progress;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
	//</editor-fold>
	
	private void init() {
		
		try {
			Sys.loadNativeResourcesAsync(
				NativeResource.VLC,
				
				new ResourceProgressListenerAdapter() {
					@Override
					public void error(final Throwable exception, String message) {
						SwingUtilities.invokeLater(new Runnable() {
							@Override
							public void run() {
								exception.printStackTrace();
								JOptionPane.showMessageDialog(Splash.this, "Unable to extract and load VLC libraries for this platform or JVM.\n\nError: " + exception.getMessage());
							}
						});
					}

					@Override
					public void begin(int totalNumberOfResources, int totalNumberOfPackages, long totalNumberOfBytes, long startTime) {
						SwingUtilities.invokeLater(new Runnable() {
							@Override
							public void run() {
								progress.setIndeterminate(false);
							}
						});
					}

					@Override
					public void reportMessage(IResourceProcessor resource, IResourcePackage pkg, final String key, final String message) {
						SwingUtilities.invokeLater(new Runnable() {
							@Override
							public void run() {
								if (!StringUtil.isNullOrEmpty(message))
									lbl.setText(message);
								else
									lbl.setText(" ");
							}
						});
					}

					@Override
					public void reportResourceComplete(IResourceProcessor resource, IResourcePackage pkg, final int totalNumberOfResources, final int totalNumberOfPackages, final long totalNumberOfBytes, final long numberOfBytesCompleted, final int numberOfResourcesCompleted, final int numberOfPackagesCompleted, final long startTime, final long duration, final String message) {
						SwingUtilities.invokeLater(new Runnable() {
							@Override
							public void run() {
								double percent = ((double)numberOfResourcesCompleted / (double)totalNumberOfResources);
								progress.setValue(progress.getMinimum() + (int)(Math.abs(progress.getMaximum() - progress.getMinimum()) * percent));
							}
						});
					}

					@Override
					public void end(boolean success, int totalNumberOfResources, int totalNumberOfPackages, long totalNumberOfBytes, long numberOfBytesCompleted, int numberOfResourcesCompleted, int numberOfPackagesCompleted, long startTime, long endTime) {
						if (success) {
							SwingUtilities.invokeLater(new Runnable() {
								@Override
								public void run() {
									lbl.setText("Initializing system...");
									progress.setIndeterminate(true);
								}
							});
						} else {
							SwingUtilities.invokeLater(new Runnable() {
								@Override
								public void run() {
									setVisible(false);
									dispose();
									System.exit(1);
								}
							});
						}
					}
				},

				new ResourceCallback() {
					@Override
					protected void completed(Resources rsrcs, Object t) {
						try {
							Sys.initializeSystem(new SystemLoaderInitializeListenerAdapter() {
								@Override
								public void afterAllSystemLoadersInitialized() {
									Sys.cleanRegistry();

									//Thread.currentThread().sleep(2000);

									SwingUtilities.invokeLater(new Runnable() {
										@Override
										public void run() {
											Splash.this.setVisible(false);
											Splash.this.dispose();

											final JFileChooser choose = new JFileChooser();
											choose.setDialogTitle("Select Media File");
											choose.setMultiSelectionEnabled(true);
											final int result = choose.showOpenDialog(Splash.this);

											if (result == JFileChooser.CANCEL_OPTION) {
												System.exit(0);
											}

											for(int i = 0; i < 1; ++i) {
												final List<URI> playList = new LinkedList<URI>();
												for (File f : choose.getSelectedFiles())
													playList.add(f.toURI());

												final String pluginPath = Path.combine(Path.nativeResourcesDirectory, "lib/vlc-1.0").getAbsolutePath();
												final MediaPlayerFactory mediaPlayerFactory = new MediaPlayerFactory(
													new String[] {
														  "-vvv"
														, "--plugin-path=" + pluginPath
													}
												);

												final MediaPlayer mediaPlayer = mediaPlayerFactory.newMediaPlayer(null);

												final Canvas videoSurface = new Canvas();
												final Frame mainFrame = new Frame("VLCJ Numpty Player");
												mainFrame.setLayout(new BorderLayout());
												mainFrame.add(videoSurface, BorderLayout.CENTER);
												mainFrame.setSize(800, 600);
												mainFrame.addWindowListener(new WindowAdapter() {
													@Override
													public void windowClosing(WindowEvent evt) {
														mediaPlayer.stop();
														mediaPlayer.release();
														mediaPlayerFactory.release();
														System.exit(0);
													}
												});

												mainFrame.setVisible(true);
												mediaPlayer.setVideoSurface(videoSurface);

												mediaPlayer.playMedia(new File(playList.get(0)).getAbsolutePath());
												//mediaPlayer.playMedia("http://129.125.136.20/axis-cgi/mjpg/video.cgi?camera=1&ext=.mjpg", ":http-caching=0");
												//mediaPlayer.playMedia("http://samples.mplayerhq.hu/MPEG2/dvd.mpeg");
												//mediaPlayer.playMedia("http://dotandmae.com/wp-content/uploads/2008/04/pablo_picasso_372x495.jpg");
												//mediaPlayer.playMedia("");
												//mediaPlayer.playMedia("");
												
											}
										}
									});
								}
							});
						} catch (Throwable tr) {
						}
					}
				}
			);
		} catch(Throwable t) {
			setVisible(false);
			dispose();
			JOptionPane.showMessageDialog(this, "Unable to extract and load VLC libraries for this platform or JVM.");
			System.exit(1);
		}
	}
}
